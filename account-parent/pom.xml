<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  	<modelVersion>4.0.0</modelVersion>
  	
  	<!-- 任何一个MAVEN项目都隐式地继承自超级POM:
  		SMAVEN_HOME/lib/maven-model-builder-x.x.x.jar
  		org/apache/maven/model/pom-4.0.0.xml
  	-->
  	
	<groupId>com.juvenxu.mvnbook.account</groupId>
	<!-- 一般来说为了方便快速定位内容模块所处的目录名称应当与其ARTIFACTID一致(不过这不是MAVEN要求的) -->
	<artifactId>account-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<description>项目的描述信息</description>
	<organization><!-- 项目的组织信息 -->
		<name></name>
		<url></url>
	</organization>
	<inceptionYear>项目的创始年份</inceptionYear>
	<url>项目的URL地址</url>
	<developers>
		<!-- 项目的开发者信息 -->
		<developer>
			<email></email>
			<id></id>
			<name></name>
			<organization></organization>
			<organizationUrl></organizationUrl>
			<properties>
				<project>
					<!-- ... -->
				</project>
			</properties>
			<roles>
				<role></role>
			</roles>
			<timezone></timezone>
			<url></url>
		</developer>
	</developers>
	<contributors><!-- 项目的贡献者信息 -->
		<contributor>
			<!-- ... -->
		</contributor>
	</contributors>
	<!--
		1、对于聚合模块来说其打包方式PACKAGING的值必须为POM否则就无法构建
		2、作为父模块的POM其打包类型也必须为POM
	-->
	<packaging>pom</packaging>
	<!-- NAME字段是为了给项目提供一个更容易阅读的名字:编译时会用到该名称 -->
	<name>Account Parent</name>

	<!-- 
		1、下面是进行聚合操作的关键步骤:可以一次构建多个项目(用户可以通过在一个打包方式为POM的MAVEN项目中声明任意数量的MODULE元素来实现模块的聚合)
		2、MAVEN会首先解析聚合模块的POM、分析要构建的模块、并计算出一个反应堆构建顺序(REACTOR BUILD ORDER)然后根据这个顺序依次构建各个模块.
		3、反应堆是所有模块组成的一个构建结构(反应堆包含了各模块之间继承与依赖的关系,从而能够自动计算出合理的模块构建顺序)
	-->
	<modules>
		<!-- 聚合模块仅仅是帮助聚合其他模块构建的工具(它本身并无实质的内容) -->
		<!-- 每个MODULE的值都是一个当前POM的相对目录 -->
		<module>../account-email</module>
		<module>../account-persist</module>
		<module>../account-captcha</module>
		<module>../account-service</module>
		<module>../account-web</module>
	</modules>
	
	<!-- MAVEN变量 -->
	<properties><!-- 自定义的MAVEN属性 -->
		<springframework.version>4.2.6.RELEASE</springframework.version>
		<junit.version>4.7</junit.version>
		<project>
			<!-- ... -->
		</project>
		<maven.surefire.plugin.version>2.14</maven.surefire.plugin.version>
	</properties>
	
	<!--
		使用MAVEN部署构件至NEXUS:
			NEXUS的仓库对于匿名用户是只读的(为了能够部署构件还需要在SETTINGS.XML中配置认证信息)
		手动部署第三方构件至NEXUS:
			选择宿主仓库如3RD PARTY,然后在页面的下方选择ARTIFACT UPLOAD选项卡
	-->
	<distributionManagement><!-- 项目的部署配置 -->
		<repository>
			<id>releases</id>
			<name>Releases</name>
			<url>http://localhost:8082/nexus/content/repositories/releases</url>
			
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<name>Snapshots</name>
			<url>http://localhost:8082/nexus/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>
	
	<issueManagement><!-- 项目的缺陷跟踪系统信息 -->
		<system></system>
		<url></url>
	</issueManagement>
	
	<ciManagement><!-- 项目的持续集成系统信息 -->
		<notifiers>
			<notifier>
				<!-- ... -->
			</notifier>
		</notifiers>
		<system></system>
		<url></url>
	</ciManagement>
	
	<scm><!-- 项目的版本控制系统信息 -->
		<connection></connection>
		<developerConnection></developerConnection>
		<tag></tag>
		<url></url>
	</scm>
	
	<mailingLists><!-- 项目的邮件列表信息 -->
		<mailingList>
			<archive></archive>
			<name></name>
			<otherArchives></otherArchives>
			<post></post>
			<subscribe></subscribe>
			<unsubscribe></unsubscribe>
		</mailingList>
	</mailingLists>

	<dependencies><!-- 项目的依赖配置 -->
		<!-- <dependency></dependency> -->
	</dependencies>
	
	<!-- 项目的仓库配置
	<repositories>
		<repository></repository>
	</repositories>
	-->

	<!-- POM继承:抽取出重复的配置 -->
	<dependencyManagement><!-- 项目的依赖管理配置 -->
		<!-- 依赖管理
			1、MAVEN提供的DEPENDENCYMANAGEMENT元素既能让子模块继承到父模块的依赖配置,又能保证子模块依赖使用的灵活性
			2、在DEPENDENCYMANAGEMENT元素下的依赖声明不会引入实际的依赖,不过它能够约束DEPENDENCIES下的依赖使用
			3、DEPENDENCYMANAGEMENT声明的依赖既不会给ACCOUNT-PARENT引入依赖也不会给它的子模块引入依赖,不过这段配置是会被继承的
		 -->
		<dependencies>
		
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${springframework.version}</version><!-- 属性引用 -->
			</dependency>
			
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- 
				依赖范围IMPORT: <scope>import</scope>
				1、该范围的依赖只在DEPENDENCYMANAGEMENT元素下才有效果,使用该范围的依赖通常指向一个POM
				2、作用是将目标POM中的DEPENDENCYMANAGEMENT配置导入并合并到当前POM的DEPENDENCYMANAGEMENT元素中
					<dependencyManagement>
						<dependencies>
							<dependency>
								<groupId>com.juvenxu.mvnbook.account</groupId>
								<artifactId>account-parent</artifactId>
								<version>1.0.0-SNAPSHOT</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
						</dependencies>
					</dependencyManagement>
				3、如上若想在另外一个模块中使用本配置文件的DEPENDENCYMANAGEMENT配置就可以使用IMPORT范围依赖将这一配置导入
				4、如果有多个项目,它们使用的依赖版本都是一致的,则就可以定义一个使用DEPENDENCYMANAGEMENT专门管理依赖的POM,然后在各个项目中导入这些依赖管理配置
			-->
		</dependencies>
		
	</dependencyManagement>
	
	
	<build><!-- 包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等 -->
		<pluginManagement>
			<!-- 插件管理
				1、在该元素中配置的依赖不会造成实际的插件调用行为
				2、当POM中配置了真正的PLUGIN元素,并且其GROUPID和ARTIFACID与PLUGINMANAGEMENT中配置的插件匹配时,PLUGINMANAGEMENT的配置才会影响实际的插件行为
			 -->
			<plugins>

				<plugin><!-- 内置的插件绑定关系:超级POM为插件声明了版本 -->
				
					<!--如果不指定JDK版本则会使用该插件的默认版本-->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					
					<configuration>
					
						<!-- 一般而言TARGET与SOURCE是保持一致的,但是有时候为了让程序能在其他版本的JDK中运行(对于低版本目标JDK源代码中需要没有使用低版本JDK中不支持的语法)会存在TARGET不同于SOURCE的情况 -->
						<source>1.8</source><!-- 源代码使用的开发版本 -->
						<target>1.8</target><!-- 需要生成的目标CLASS文件的编译版本 -->
						
						<!-- 这下面的是可选项 -->
				        <meminitial>128m</meminitial>
				        <maxmem>512m</maxmem>
				        <fork>true</fork> <!-- 用于明确表示编译版本配置的可用 --> 
				        <compilerVersion>1.3</compilerVersion>
				        
				        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
				        <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>
        
					</configuration>

					
				</plugin>

				<plugin><!--测试插件(已有默认配置)-->
				    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <!-- 当需要修改一些测试执行的策略时就需重新配置这个插件 -->
                    
                    <!-- 配置JUNIT -->
                    <!-- 1、插件自动匹配:最简单的配置方式就是不配置或者是只声明插件
						这个时候该插件会按照如下逻辑去寻找JUNIT的版本并执行测试用例
						if the junit version in the project >= 4.7 and the parallel attribute has any value
						    use junit47 provider
						if junit >= 4.0 is present
						    use junit4 provider
						else
						    use junit3.8.1
					-->
                    <!-- 2、插件手动匹配:
	                    <dependencies>
					        <dependency>
					            <groupId>org.apache.maven.surefire</groupId>
					            <artifactId>surefire-junit47</artifactId>	明确用的是JUNIT4.7及以上版本
					            <version>2.19</version>
					        </dependency>
					    </dependencies>
				   	或
					    <dependencies>
					        <dependency>
					            <groupId>org.apache.maven.surefire</groupId>
					            <artifactId>surefire-junit4</artifactId>	JUNIT4.0(含)到JUNIT4.7(不含)的版本
					            <version>2.19</version>
					        </dependency>
					    </dependencies>
				          或
					    <dependencies>
					        <dependency>
					            <groupId>org.apache.maven.surefire</groupId>
					            <artifactId>surefire-junit3</artifactId>	JUNIT3.8(含)到JUNIT4.0(不含)的版本
					            <version>2.19</version>
					        </dependency>
					    </dependencies>
                    -->
                    <!-- 3、跳过测试用例(3种方法):比如打包时不想进行测试
	                    1、在CONFIGURATION中声明(在插件的CONFIGURATION配置中声明跳过测试用例)
		                    <configuration>
						        <skipTests>true</skipTests>-配置是否跳过测试用例执行
						    </configuration>
					    2、在PROPERTIES中声明(在PROPERTIES配置中声明跳过测试用例)
						    <properties>
							    <maven.test.skip>true</maven.test.skip>
							</properties>
							或
							<properties>
							    <skipTests>true</skipTests>
							</properties>
						3、在执行命令中声明(在执行MAVEN命令时可以声明跳过测试用例)
							$ mvn test -Dmaven.test.skip=true
							或
							$ mvn test -DskipTests=true
                    -->
                    <!-- 4、测试用例的包含与例外配置
                    	<configuration>
					        <includes>
					            <include>**/AppTest.java</include>
					        </includes>
					        <excludes>
					            <exclude>**/App2Test.java</exclude>
					        </excludes>
					    </configuration>
                    -->
                     
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.1</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>verify</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				
				<!-- 站点生成插件 -->
				<plugin>
					<!-- MAVEN3 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.0-beta-1</version>
				</plugin>
				<plugin>
					<!-- MAVEN2 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>2.1.1</version>
				</plugin>
				
			</plugins>
		</pluginManagement>
	</build>
	
	<reporting><!-- 包括项目的报告输出目录配置、报告插件配置等 -->
		<excludeDefaults></excludeDefaults>
		<outputDirectory></outputDirectory>
		<plugins></plugins>
	</reporting>
	
</project>
